DOWNLOAD="aria2c -c --download-result=hide --console-log-level=error --disable-ipv6=true --summary-interval=0 --show-files=false"
STBURL="https://cdn.kernel.org/pub/linux/kernel/v5.x/"
MLURL="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/snapshot/"

source_dir(){
mkdir -p ${SRC}
cp -f soc.txt ${SRC}/
cd ${SRC}
}

compiler(){
if [[ `grep -w "gcc=1" "userdata.txt"` ]]; then
	rm -f {gcc.txt,ccache.txt,clang.txt}
	gcc_compiler;
fi
if [[ `grep -w "ccache=1" "userdata.txt"` ]]; then
	if [ -e /usr/bin/ccache ]; then
	rm -f {gcc.txt,ccache.txt,clang.txt}
	ccache_compiler;

else
	sudo apt update
	sudo apt install -y ccache
	sleep 1s
	rm -f {gcc.txt,ccache.txt,clang.txt}
	ccache_compiler;
	fi
fi
if [[ `grep -w "clang=1" "userdata.txt"` ]]; then
	if [ -e /usr/bin/clang-12 ]; then
	rm -f {gcc.txt,ccache.txt,clang.txt}
	clang_compiler;
else
	sudo apt update
	sudo apt install -y clang clang-12 lld lld-12 llvm
	sleep 1s
	rm -f {gcc.txt,ccache.txt,clang.txt}
	clang_compiler;
	fi
fi
}

mainline_clean(){
if [ -e ${MLKERNEL}-${VERSION} ]; then
	echo ""
	echo -e "${PNK}Cleaning${FIN} ..."
	rm -fdr ${MLKERNEL}-${VERSION};
fi
}

rpi4_binaries(){
BINURL="https://github.com/raspberrypi/firmware/raw/master/boot/"
mkdir -p binaries
rm -f binaries/*
cd binaries
echo
echo_bins
${DOWNLOAD} ${BINURL}fixup4.dat
${DOWNLOAD} ${BINURL}fixup4cd.dat
${DOWNLOAD} ${BINURL}fixup4db.dat
${DOWNLOAD} ${BINURL}fixup4x.dat
${DOWNLOAD} ${BINURL}start4.elf
${DOWNLOAD} ${BINURL}start4cd.elf
${DOWNLOAD} ${BINURL}start4db.elf
${DOWNLOAD} ${BINURL}start4x.elf
${DOWNLOAD} ${BINURL}LICENCE.broadcom
${DOWNLOAD} ${BINURL}COPYING.linux
cd ..
if ls binaries/{fixup4.dat,fixup4cd.dat,fixup4db.dat,fixup4x.dat,start4.elf,start4cd.elf,start4db.elf,start4x.elf} > /dev/null 2>&1
	then echo_bdone;
	else echo_fail && exit;
fi
}

download_mainline(){
echo
echo_mainline
if [ -e ${MLKERNEL}-${VERSION}.tar.gz ]; then
	echo -e "${YLW}${MLKERNEL}-${VERSION}.tar.gz found${FIN}.";
else
	${DOWNLOAD} ${MLURL}${MLKERNEL}-${VERSION}.tar.gz
	echo_bdone;
fi
echo
echo_extract
echo -e -n "${WHT}"
pv ${MLKERNEL}-${VERSION}.tar.gz | tar -xzf - -C .
echo -e -n "${FIN}"
cd ${MLKERNEL}-${VERSION}
rpi4_binaries
export ARCH=arm64
}

download_stable(){
echo
echo_stable
if [ -e ${MLKERNEL}-${VERSION}.tar.xz ]; then
	echo -e "${YLW}${MLKERNEL}-${VERSION}.tar.xz found${FIN}.";
else
	${DOWNLOAD} ${STBURL}${MLKERNEL}-${VERSION}.tar.xz
	echo_bdone;
fi
echo
echo_extract
echo -e -n "${WHT}"
pv ${MLKERNEL}-${VERSION}.tar.xz | tar -xJ ${MLKERNEL}-${VERSION}
echo -e -n "${FIN}"
cd ${MLKERNEL}-${VERSION}
rpi4_binaries
export ARCH=arm64
}

noinitrd(){
sed -i 's/export INITRD=$want_initrd/export INITRD=No/g' scripts/package/builddeb
sed -i 's/export INITRD=$(if_enabled_echo CONFIG_BLK_DEV_INITRD Yes No)/export INITRD=No/g' scripts/package/builddeb
}

userpatches(){
if
ls ../${UP}/*.patch > /dev/null 2>&1;
then echo -e "${GRN}Applying user patches${FIN}." &&
for i in ../${UP}/*.patch; do patch -p1 < $i; done;
else echo -e "${YLW}No user patches found${FIN}.";
fi
}

patching(){
echo
echo_patch
userpatches
rm -f scripts/package/builddeb
rm -f scripts/package/mkdebian
cp -R ../${PAT}/builddeb scripts/package/
cp -R ../${PAT}/mkdebian scripts/package/
chmod +x scripts/package/builddeb
chmod +x scripts/package/mkdebian
if [[ `grep -w "crosscompile=1" "../../userdata.txt"` ]]; then
	patch -p1 < ../${ML}/rpi4b-cc-packaging.patch;
else
	patch -p1 < ../${ML}/rpi4b-nc-packaging.patch;
fi
if ls ../${ML}/misc/*.patch > /dev/null 2>&1; then
	for i in ../${ML}/misc/*.patch; do patch -p1 < $i; done;
fi
cp -f ../${PAT}/headers-byteshift.patch headers-byteshift.patch;
echo_done
echo
}

cconfig(){
echo_cconfig
cp -f ../${DEF}/${MYCONFIG} arch/arm64/configs/
if [[ `grep -w "crosscompile=1" "../../userdata.txt"` ]]; then
	make -j${CORES} ARCH=arm64 ${ARM64_CROSS} CFLAGS="${CFLAGS}" CROSS_COMPILE=aarch64-linux-gnu- ${MYCONFIG};
else
	make -j${CORES} ARCH=arm64 ${NATIVE} CFLAGS="${CFLAGS}" ${MYCONFIG};
fi
echo_done
}

rpi_config(){
echo_fconfig
cp -f ../${DEF}/bcm2711_defconfig arch/arm64/configs/
echo CONFIG_MODULE_SIG=y >> arch/arm64/configs/bcm2711_defconfig
echo CONFIG_MODULE_SIG_KEY='"'certs/signing_key.pem'"' >> arch/arm64/configs/bcm2711_defconfig
if [[ `grep -w "lto_clang_thin=1" "../../userdata.txt"` ]]; then
	echo CONFIG_LTO_CLANG_THIN=y >> arch/arm64/configs/bcm2711_defconfig;
fi
if [[ `grep -w "crosscompile=1" "../../userdata.txt"` ]]; then
	make -j${CORES} ARCH=arm64 ${ARM64_CROSS} CFLAGS="${CFLAGS}" CROSS_COMPILE=aarch64-linux-gnu- bcm2711_defconfig;
else
	make -j${CORES} ARCH=arm64 ${NATIVE} CFLAGS="${CFLAGS}" bcm2711_defconfig;
fi
echo_done
}

menu_config(){
echo
echo_menuconfig
sleep 1s
if [[ `grep -w "crosscompile=1" "../../userdata.txt"` ]]; then
	make -j${CORES} ARCH=arm64 ${ARM64_CROSS} CFLAGS="${CFLAGS}" CROSS_COMPILE=aarch64-linux-gnu- menuconfig;
else
	make -j${CORES} ARCH=arm64 ${NATIVE} CFLAGS="${CFLAGS}" menuconfig;
fi
}

cross_compile(){
    echo -e "-- ${GRN}CC${FIN}"
    echo_build
    echo 'y' | make -j${CORES} ARCH=arm64 KBUILD_BUILD_HOST=${KBHOST} ${ARM64_CROSS} CFLAGS="${CFLAGS}" CROSS_COMPILE=aarch64-linux-gnu- bindeb-pkg
    rm -f ../*libc*.deb
}

native_compile(){
    echo -e "-- ${GRN}NC${FIN}"
    echo_build
    echo 'y' | make -j${CORES} ARCH=arm64 KBUILD_BUILD_HOST=${KBHOST} ${NATIVE} CFLAGS="${CFLAGS}" bindeb-pkg
    rm -f ../*libc*.deb
}

bcm2711_check(){
if ls ${OUT4}/*.deb > /dev/null 2>&1; then
	mkdir -p ${OUT4}/tmp
	mv -f ${OUT4}/*.deb ${OUT4}/tmp;
fi
}
