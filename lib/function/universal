# Stage1
qemu_arm64(){
mkdir -p p2/usr/bin
cp $(command -v "qemu-aarch64-static") p2/usr/bin
}

qemu_arm(){
mkdir -p p2/usr/bin
cp $(command -v "qemu-arm-static") p2/usr/bin
}

qemu_arm64_remove(){
rm p2/usr/bin/qemu-aarch64-static
}

qemu_arm_remove(){
rm p2/usr/bin/qemu-arm-static
}

bcm2711_config_arch(){
if [[ `grep -w "bcm2711" "soc.txt"` ]]; then
	if [[ `grep -w "arm64" "soc.txt"` ]]; then
		:;
	else
		sed -i '1d' p1/config.txt;
		sed -i 's/kernel=kernel8.img/kernel=kernel7l.img/g' p1/config.txt;
	fi
fi
}

bcm2708_initrd(){
if [[ `grep -w "bcm2708" "soc.txt"` ]]; then
	if [[ `grep -Fx "ext4=1" "userdata.txt"` ]]; then
		sed -i 's/initramfs initrd.gz followkernel/#initramfs initrd.gz followkernel/g' p1/config.txt;
	fi
fi
}

# rootfs
aarch64_extract(){
tar -xf ${DISTRO}-${DISTRO_VERSION}-rootfs-aarch64.tar.xz -C p2/
}

armhf_extract(){
tar -xf ${DISTRO}-${DISTRO_VERSION}-rootfs-armhf.tar.xz -C p2/
}

armel_extract(){
tar -xf ${DISTRO}-${DISTRO_VERSION}-rootfs-armel.tar.xz -C p2/
}

aarch64_rootfs(){
if [ -e ${DISTRO}-${DISTRO_VERSION}-rootfs-aarch64.tar.xz ]; then
	echo
	echo -n "Extracting rootfs "
	aarch64_extract
	echo_bdone;
else
	echo
	echo -e "${YLW}Missing rootfs tarball${FIN}!"
	make cleanup
	exit;
fi
echo
}

armhf_rootfs(){
if [ -e ${DISTRO}-${DISTRO_VERSION}-rootfs-armhf.tar.xz ]; then
	echo
	echo -n "Extracting rootfs "
	armhf_extract
	echo_bdone;
else
	echo
	echo -e "${YLW}Missing rootfs tarball${FIN}!"
	make cleanup
	exit;
fi
echo
}

armel_rootfs(){
if [ -e ${DISTRO}-${DISTRO_VERSION}-rootfs-armel.tar.xz ]; then
	echo
	echo -n "Extracting rootfs "
	armel_extract
	echo_bdone;
else
	echo
	echo -e "${YLW}Missing rootfs tarball${FIN}!"
	make cleanup
	exit;
fi
echo
}

# banners
debian_banner(){
if [ -e /usr/bin/toilet ]; [ -e /usr/share/figlet/small.flf ]; then
	toilet -f small --filter metal 'Debian';
else
	echo "${WHT}You are missing depends?${FIN}"
	sleep 1s
	sudo apt update
	sudo apt install -y toilet figlet
	echo ""
	toilet -f small --filter metal 'Debian';
fi
}

devuan_banner(){
if [ -e /usr/bin/toilet ]; [ -e /usr/share/figlet/small.flf ]; then
	toilet -f small --filter metal 'Devuan';
else
	echo "${WHT}You are missing depends?${FIN}"
	sleep 1s
	sudo apt update
	sudo apt install -y toilet figlet
	echo ""
	toilet -f small --filter metal 'Devuan';
fi
}

ubuntu_banner(){
if [ -e /usr/bin/toilet ]; [ -e /usr/share/figlet/small.flf ]; then
	toilet -f small --filter metal 'Ubuntu';
else
	echo "${WHT}You are missing depends?${FIN}"
	sleep 1s
	sudo apt update
	sudo apt install -y toilet figlet
	echo ""
	toilet -f small --filter metal 'Ubuntu';
fi
}

stage1_kernel(){
if [[ `grep -w "bcm2711" "soc.txt"` ]]; then
	if [[ `grep -w "arm64" "soc.txt"` ]]; then
		if [[ `ls output/bcm2711/{raspberrypi-linux-image_*.deb,raspberrypi-linux-headers_*.deb}` ]] > /dev/null 2>&1; then
			cp output/bcm2711/*.deb p2/root;
		fi
	else
		if [[ `grep -w "arm" "soc.txt"` ]]; then
			if [[ `ls output/bcm2711v7/{raspberrypi-linux-image_*.deb,raspberrypi-linux-headers_*.deb}` ]] > /dev/null 2>&1; then
				cp output/bcm2711v7/*.deb p2/root;
			fi
		fi
	fi
fi
if [[ `grep -w "bcm2710" "soc.txt"` ]]; then
	if [[ `ls output/bcm2710/{raspberrypi-linux-image_*.deb,raspberrypi-linux-headers_*.deb}` ]] > /dev/null 2>&1; then
		cp output/bcm2710/*.deb p2/root;
	fi
else
	if [[ `grep -w "bcm2709" "soc.txt"` ]]; then
		if [[ `ls output/bcm2709/{raspberrypi-linux-image_*.deb,raspberrypi-linux-headers_*.deb}` ]] > /dev/null 2>&1; then
			cp output/bcm2709/*.deb p2/root;
		fi
	else
		if [[ `grep -w "bcm2708" "soc.txt"` ]]; then
			if [[ `ls output/bcm2708/{raspberrypi-linux-image_*.deb,raspberrypi-linux-headers_*.deb}` ]] > /dev/null 2>&1; then
				cp output/bcm2708/*.deb p2/root;
			fi
		fi
	fi
fi
}

# Stage 2
root_password(){
echo "root:toor" | chpasswd
}

wireless_regdb(){
echo
echo Adding regdb.
sleep 1s
if cat /etc/os-release | grep Ubuntu > /dev/null 2>&1;
	then echo 'KERNEL=="regulatory*", ACTION=="change", SUBSYSTEM=="platform", RUN+="/sbin/crda"' > /etc/udev/rules.d/60-regdb.rules;
fi
git clone https://kernel.googlesource.com/pub/scm/linux/kernel/git/sforshee/wireless-regdb
echo
echo Moving db files.
sleep 1s
cd wireless-regdb
cp -f regulatory.db /lib/firmware/regulatory.db
cp -f regulatory.db.p7s /lib/firmware/regulatory.db.p7s
cd ~
rm -fdr wireless-regdb
echo Done.
}

# SYS-MODS
raspberrypi_sys_mods(){
echo
echo Building raspi-sys-mods package.
sleep 1s
apt update
apt install -y debhelper d-shlibs rfkill dosfstools psmisc
git clone https://github.com/RPi-Distro/raspberrypi-sys-mods.git
if [[ `grep -w 'DISTRO="devuan"' "/root/userdata.txt"` ]]; then
	mv -f raspberrypi-sys-mods-control.patch raspberrypi-sys-mods/
	cd raspberrypi-sys-mods
	patch -p1 < raspberrypi-sys-mods-control.patch
	rm -f raspberrypi-sys-mods-control.patch;
else
	cd raspberrypi-sys-mods;
fi
dpkg-buildpackage -us -uc
cd ~
dpkg -i raspberrypi-sys-mods*.deb
rm -fdR raspberrypi-sys-mods*
if [ -e /etc/apt/sources.list.d/vscode.list ]; then
	rm -f /etc/apt/sources.list.d/vscode.list;
fi
if [ -e /etc/apt/trusted.gpg.d/microsoft.gpg ]; then
	rm -f /etc/apt/trusted.gpg.d/microsoft.gpg;
fi
if [ -e /etc/apt/preferences.d/3rd_parties.pref ]; then
	rm -f /etc/apt/preferences.d/3rd_parties.pref;
fi
echo Done.
}

# EEPROM
find_eeprom(){
EEPROM_VERSION=$(curl --silent -L ${CHANGELOG} | awk '{if (NR==1) {print substr($2, 1, length($2)-3)}}' | sed 's/[()]//g')
if [[ `wget -S --spider ${ERURL}rpi-eeprom_${EEPROM_VERSION}.orig.tar.gz 2>&1 | grep 'HTTP/1.1 200 OK'` ]]; then
	download_eeprom;
else
	finding_eeprom;
fi
}

finding_eeprom(){
EEPROM_VERSION=$(curl --silent -L ${CHANGELOG} | awk '{if (NR==10) {print substr($2, 1, length($2)-3)}}' | sed 's/[()]//g')
if [[ `wget -S --spider ${ERURL}rpi-eeprom_${EEPROM_VERSION}.orig.tar.gz 2>&1 | grep 'HTTP/1.1 200 OK'` ]]; then
	download_eeprom;
else
	EEPROM_VERSION="13.3"
	download_eeprom;
fi
}

download_eeprom(){
wget -cq --show-progress ${ERURL}rpi-eeprom_${EEPROM_VERSION}-1.debian.tar.xz
wget -cq --show-progress ${ERURL}rpi-eeprom_${EEPROM_VERSION}.orig.tar.gz
}

bcm2711_eeprom(){
ERURL="https://archive.raspberrypi.org/debian/pool/main/r/rpi-eeprom/"
CHANGELOG="https://raw.githubusercontent.com/raspberrypi/rpi-eeprom/debian/bullseye/debian/changelog"
echo
export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
echo Installing rpi-eeprom.
sleep 1s
apt install help2man rsync pciutils -y
###
mkdir -p ~/eeprom
mv -f rpi-eeprom-update.patch /root/eeprom/
mv -f rpi-eeprom-control.patch /root/eeprom/
cd ~/eeprom
find_eeprom
tar xf rpi-eeprom_${EEPROM_VERSION}.orig.tar.gz
tar xf rpi-eeprom_${EEPROM_VERSION}-1.debian.tar.xz
rm -f rpi-eeprom_${EEPROM_VERSION}-1.debian.tar.xz
mkdir -p debian/patches
mv rpi-eeprom-update.patch debian/patches/rpi-eeprom-update.patch 
echo rpi-eeprom-update.patch >> debian/patches/series
mv -f debian rpi-eeprom-${EEPROM_VERSION}/
mv rpi-eeprom-control.patch rpi-eeprom-${EEPROM_VERSION}/
cd rpi-eeprom-${EEPROM_VERSION}
patch -p1 < rpi-eeprom-control.patch
rm -f rpi-eeprom-control.patch
dpkg-buildpackage -us -nc -uc
cd ..
dpkg -i *.deb
cd ..
rm -fdr eeprom
echo Done.
}

# Userland
rpi_userland(){
echo
echo Adding raspi userland.
rm -f /etc/profile
mv -f profile /etc/profile
mv rpi-vc.conf /etc/ld.so.conf.d/rpi-vc.conf
chown root:root /etc/profile
chown root:root /etc/ld.so.conf.d/rpi-vc.conf
sleep 1s
mkdir -p /opt
git clone https://github.com/raspberrypi/userland.git
mv -f userland-remove-hi-pi.patch /root/userland/
cd userland
patch -p1 < userland-remove-hi-pi.patch
rm -f userland-remove-hi-pi.patch
if [[ `grep -w "arm64" "/root/soc.txt"` ]]; then
	echo -e "\e[1;37m== ARM64\e[0m"
	sleep 2s
	./buildme --aarch64;
else
	if [[ `grep -w "arm" "/root/soc.txt"` ]]; then
		echo -e "\e[1;37m== ARM\e[0m"
		sleep 2s
		./buildme;
	fi
fi
cd ~
rm -f -d -R userland
ldconfig
echo Done.
}

# Modules
bcm_modules(){
rm -f /etc/modules
tee /etc/modules <<EOF
# /etc/modules: kernel modules to load at boot time.
#
# This file contains the names of kernel modules that should be loaded
# at boot time, one per line. Lines beginning with "#" are ignored.
#bcm2835-v4l2
#i2c-dev

EOF
chown root:root /etc/modules
}

bcm2710_modules(){
rm -f /etc/modules
tee /etc/modules <<EOF
# /etc/modules: kernel modules to load at boot time.
#
# This file contains the names of kernel modules that should be loaded
# at boot time, one per line. Lines beginning with "#" are ignored.
#bcm2835-v4l2
#i2c-dev
snd_bcm2835

EOF
chown root:root /etc/modules
}

# Zramswap setup
zramswap_config(){
sed -i 's/#ALLOCATION=256/ALLOCATION=1024/g' /etc/default/zramswap
sed -i 's/#SIZE=256/SIZE=1024/g' /etc/default/zramswap
sed -i 's/#PRIORITY=100/PRIORITY=100/g' /etc/default/zramswap
}

# Flush runtime journal
systemd_journald(){
# system.journal corrupted or uncleanly shut down, renaming and replacing
if [ -e /etc/systemd/journald.conf ]; then
	sed -i 's/#Storage=auto/Storage=volatile/g' /etc/systemd/journald.conf;
	sed -i 's/#SystemMaxFileSize=/SystemMaxFileSize=50M/g' /etc/systemd/journald.conf;
	sed -i 's/#SystemMaxFiles=100/SystemMaxFiles=5/g' /etc/systemd/journald.conf;
fi
}

# Download kernel archive
download_kernel(){
DOWNLOAD="aria2c -c --download-result=hide --console-log-level=error --disable-ipv6=true --summary-interval=0 --show-files=false"
KURL="https://github.com/pyavitz/rpi-linux/releases/download/gcc-10/"
echo -e -n "\e[1;37mSearching\e[0m ...";
sleep 1s;
if [[ `grep -w "bcm2711" "/root/soc.txt"` ]]; then
	if [[ `wget -S --spider ${KURL}rpi4-${VERSION}.tar.xz 2>&1 | grep 'HTTP/1.1 200 OK'` ]]; then
		${DOWNLOAD} ${KURL}rpi4-${VERSION}.tar.xz;
		echo "";
		tar xf rpi4-${VERSION}.tar.xz;
		cd rpi4-${VERSION};
		dpkg -i *.deb;
		cd ~;
		rm -fdr rpi4-${VERSION}*;
	else
		${DOWNLOAD} ${KURL}rpi4-5.15.y.tar.xz
		echo "";
		tar xf rpi4-5.15.y.tar.xz;
		cd rpi4-5.15.y;
		dpkg -i *.deb;
		cd ~;
		rm -fdr rpi4-5.15.y*;
	fi
else
	if [[ `grep -w "bcm2711v7" "/root/soc.txt"` ]]; then
		if [[ `wget -S --spider ${KURL}rpi4v7-${VERSION}.tar.xz 2>&1 | grep 'HTTP/1.1 200 OK'` ]]; then
			${DOWNLOAD} ${KURL}rpi4v7-${VERSION}.tar.xz;
			echo "";
			tar xf rpi4v7-${VERSION}.tar.xz;
			cd rpi4v7-${VERSION};
			dpkg -i *.deb;
			cd ~;
			rm -fdr rpi4v7-${VERSION}*;
		else
			${DOWNLOAD} ${KURL}rpi4v7-5.15.y.tar.xz
			echo "";
			tar xf rpi4v7-5.15.y.tar.xz;
			cd rpi4v7-5.15.y;
			dpkg -i *.deb;
			cd ~;
			rm -fdr rpi4v7-5.15.y*;
		fi
	else
		if [[ `grep -w "bcm2710" "/root/soc.txt"` ]]; then
			if [[ `wget -S --spider ${KURL}rpi3-${VERSION}.tar.xz 2>&1 | grep 'HTTP/1.1 200 OK'` ]]; then
				${DOWNLOAD} ${KURL}rpi3-${VERSION}.tar.xz;
				echo "";
				tar xf rpi3-${VERSION}.tar.xz;
				cd rpi3-${VERSION};
				dpkg -i *.deb;
				cd ~;
				rm -fdr rpi3-${VERSION}*;
			else
				${DOWNLOAD} ${KURL}rpi3-5.15.y.tar.xz
				echo "";
				tar xf rpi3-5.15.y.tar.xz;
				cd rpi3-5.15.y;
				dpkg -i *.deb;
				cd ~;
				rm -fdr rpi3-5.15.y*;
			fi
		else
			if [[ `grep -w "bcm2709" "/root/soc.txt"` ]]; then
				if [[ `wget -S --spider ${KURL}rpi2-${VERSION}.tar.xz 2>&1 | grep 'HTTP/1.1 200 OK'` ]]; then
					${DOWNLOAD} ${KURL}rpi2-${VERSION}.tar.xz;
					echo "";
					tar xf rpi2-${VERSION}.tar.xz;
					cd rpi2-${VERSION};
					dpkg -i *.deb;
					cd ~;
					rm -fdr rpi2-${VERSION}*;
				else
					${DOWNLOAD} ${KURL}rpi2-5.15.y.tar.xz
					echo "";
					tar xf rpi2-5.15.y.tar.xz;
					cd rpi2-5.15.y;
					dpkg -i *.deb;
					cd ~;
					rm -fdr rpi2-5.15.y*;
				fi
			else
				if [[ `grep -w "bcm2708" "/root/soc.txt"` ]]; then
					if [[ `wget -S --spider ${KURL}rpi-${VERSION}.tar.xz 2>&1 | grep 'HTTP/1.1 200 OK'` ]]; then
						${DOWNLOAD} ${KURL}rpi-${VERSION}.tar.xz;
						echo "";
						tar xf rpi-${VERSION}.tar.xz;
						cd rpi-${VERSION};
						dpkg -i *.deb;
						cd ~;
						rm -fdr rpi-${VERSION}*;
					else
						${DOWNLOAD} ${KURL}rpi-5.15.y.tar.xz
						echo "";
						tar xf rpi-5.15.y.tar.xz;
						cd rpi-5.15.y;
						dpkg -i *.deb;
						cd ~;
						rm -fdr rpi-5.15.y*;
					fi
				fi
			fi
		fi
	fi
fi
}

# Kernel
stage2_kernel(){
echo
echo Installing kernel.
apt update
apt upgrade -y
apt -y clean
apt -y autoclean
sleep 1s
cd ~
if [[ `ls /root/{raspberrypi-linux-image_*.deb,raspberrypi-linux-headers_*.deb}` ]] > /dev/null 2>&1; then
	dpkg -i *.deb;
	rm -f *.deb;
else
	download_kernel;
fi
echo Done.
sleep 1s
fetch_version
}

# Fetch kernel version
fetch_version(){
echo 'INSTALLED_KERNEL="' > /root/kernel1
cat /usr/src/linux-headers*/include/config/kernel.release > /root/kernel2
echo '"' > /root/kernel3
paste -d '\0' kernel1 kernel2 kernel3  > /root/kernel.txt
rm -f kernel1 kernel2 kernel3
if [[ `grep -w "ext4=1" "/root/userdata.txt"` ]]; then
	echo FSTYPE='"'ext4'"' >> /root/kernel.txt;
fi
if [[ `grep -w "btrfs=1" "/root/userdata.txt"` ]]; then
	echo FSTYPE='"'btrfs'"' >> /root/kernel.txt;
fi
if [[ `grep -w "xfs=1" "/root/userdata.txt"` ]]; then
	echo FSTYPE='"'xfs'"' >> /root/kernel.txt;
fi
}

# User scripts
uscripts_stage1(){
mkdir -p p2/root/userscripts
cp -f files/userscripts/* p2/root/userscripts/
rm -f p2/root/userscripts/README.md
}

uscripts_stage2(){
echo
echo -e "\e[1;33mAdding user scripts\e[0m."
mkdir -p /usr/local/bin
cp -f userscripts/* /usr/local/bin/
rm -fdr userscripts 
chmod +x /usr/local/bin/*
sleep 1s
echo -e "\e[1;33mDone\e[0m."
echo
}

# Firmware
extra_firmware(){
echo
echo Adding extra firmware.
sleep 1s
mkdir -p /lib/firmware/brcm
mkdir -p /lib/firmware/updates
git clone https://github.com/pyavitz/firmware.git /lib/firmware/updates/brcm
mv fw-0a5c_21e8.hcd /lib/firmware/brcm/BCM20702A0-0a5c-21e8.hcd
cp /lib/firmware/brcm/BCM20702A0-0a5c-21e8.hcd /lib/firmware/brcm/BCM20702A1-0a5c-21e8.hcd
chown root:root /lib/firmware/brcm/BCM20702A1-0a5c-21e8.hcd
chown root:root /lib/firmware/brcm/BCM20702A0-0a5c-21e8.hcd
install -Dm644 UPDATE.mem /lib/firmware/updates/renesas_usb_fw.mem
rm -f UPDATE.mem
ln -sr /lib/firmware /etc/firmware
mkdir -p /lib/firmware/updates/rtl_nic
cd /lib/firmware/updates/rtl_nic
wget -cq https://kernel.googlesource.com/pub/scm/linux/kernel/git/firmware/linux-firmware.git/+archive/refs/heads/main/rtl_nic.tar.gz
if [ -e rtl_nic.tar.gz ]; then
	tar xf rtl_nic.tar.gz
	rm -f rtl_nic.tar.gz;
else
	:;
fi
cd ~
echo Done.
}

# Initrd script
initrd_script(){
cd ~
echo
echo Adding initrd script.
mkdir -p /etc/initramfs/post-update.d/
mv -f 99-initrd /etc/initramfs/post-update.d/
chmod +x /etc/initramfs/post-update.d/99-initrd
chown root:root /etc/initramfs/post-update.d/99-initrd
}

### Finish
# Defrag
defrag_p2(){
if [[ `grep -w "ext4=1" "userdata.txt"` ]]; then
	e4defrag -c p2;
else
	if [[ `grep -w "btrfs=1" "userdata.txt"` ]]; then
		btrfs filesystem defragment -f -r p2;
	else
		if [[ `grep -w "xfs=1" "userdata.txt"` ]]; then
			xfs_fsr p2;
		fi
	fi
fi
}

# Shrink
ext4_shrink(){
echo
echo_shrink
chmod +x scripts/shrink
scripts/shrink -s ${DEVICE_SOC}-${DISTRO}-${DISTRO_VERSION}-${IMAGE_DATE}.img
fix_cmdline
echo_done
}

fix_cmdline(){
echo 'LOOP1="/dev/mapper/' > kpart1
echo 'LOOP2="/dev/mapper/' >> kpart1
IMAGE_FILE="${DEVICE_SOC}-${DISTRO}-${DISTRO_VERSION}-${IMAGE_DATE}.img"
kpartx="$(kpartx -av $IMAGE_FILE)"
echo "$kpartx"
grep -o 'loop.p.' <<<"$kpartx" > kpart2
echo '"' > kpart3
echo '"' >> kpart3
paste -d '\0' kpart1 kpart2 kpart3 > kpart.txt
rm -f {kpart1,kpart2,kpart3}
source kpart.txt
BOOT="${LOOP1}"
mkdir -p p1
sleep 1s
mount "${BOOT}" p1
rm -f p1/cmdline.txt
new_partuuid
cmdline
sleep 1s
umount p1
rm -fdr p1
kpartx -d ${IMAGE_FILE}
rm -f kpart.txt
}

new_partuuid(){
rm -f part-uuid.txt
ROOTFS="${LOOP2}"
ROOT_PARTUUID=$(blkid -o export -- ${ROOTFS} | sed -ne 's/^PARTUUID=//p')
echo ROOT_PARTUUID='"'$ROOT_PARTUUID'"' > part-uuid.txt

source part-uuid.txt
}

# Rename and compress
rename_image(){
source kernel.txt
mv -f ${DEVICE_SOC}-${DISTRO}-${DISTRO_VERSION}-${IMAGE_DATE}.img ${DEVICE_SOC}-${DISTRO}-${DISTRO_VERSION}-${INSTALLED_KERNEL}-${FSTYPE}-${IMAGE_DATE}.img
}

compress_image(){
source kernel.txt
mv -f ${DEVICE_SOC}-${DISTRO}-${DISTRO_VERSION}-${IMAGE_DATE}.img ${DEVICE_SOC}-${DISTRO}-${DISTRO_VERSION}-${INSTALLED_KERNEL}-${FSTYPE}-${IMAGE_DATE}.img
xz -zev --threads=${CORES} ${DEVICE_SOC}-${DISTRO}-${DISTRO_VERSION}-${INSTALLED_KERNEL}-${FSTYPE}-${IMAGE_DATE}.img
}

# LED script
led_script(){
tee /usr/local/sbin/leds <<EOF
#!/bin/bash

if [[ -e /dev/mmcblk0 ]]; then 
	if [ -e /sys/class/leds/led0/trigger ]; then
		echo "mmc0" | tee /sys/class/leds/led0/trigger;
	fi
fi

if [[ -e /dev/mmcblk1 ]]; then 
	if [ -e /sys/class/leds/ACT/trigger ]; then
		echo "mmc1" | tee /sys/class/leds/ACT/trigger;
	fi
fi

pwr_default(){
sh -c 'echo 0 > /sys/class/leds/led1/brightness'
}

pwr_mainline(){
sh -c 'echo 0 > /sys/class/leds/PWR/brightness'
}

if [ -e /sys/class/leds/led1/brightness ]; then
	pwr_default;
fi
if [ -e /sys/class/leds/PWR/brightness ]; then
	pwr_mainline;
fi
EOF
chmod +x /usr/local/sbin/leds
chown -R root:root /usr/local/sbin/leds
}
