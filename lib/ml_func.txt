download_mainline () {
    echo
    echo_mainline
    if ls ${MLKERNEL}-${VERSION}.tar.gz > /dev/null 2>&1;
	then echo -e "${YLW}${MLKERNEL}-${VERSION}.tar.gz found${FIN}.";
	else aria2c -c --download-result=hide --console-log-level=error --disable-ipv6=true --summary-interval=0 --show-files=false https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/snapshot/${MLKERNEL}-${VERSION}.tar.gz && echo_ok;
    fi
    echo
    echo_extract
    tar -xf ${MLKERNEL}-${VERSION}.tar.gz --checkpoint=.100
    echo_done
    sleep 1s
    cd ${MLKERNEL}-${VERSION}
    export ARCH=arm64
    rm -f scripts/package/builddeb
    rm -f scripts/package/mkdebian
    cp -R ../${PAT}/builddeb scripts/package/
    cp -R ../${PAT}/mkdebian scripts/package/
    chmod +x scripts/package/builddeb
    chmod +x scripts/package/mkdebian
}

download_stable () {
    echo
    echo_stable
    if ls ${MLKERNEL}-${VERSION}.tar.xz > /dev/null 2>&1;
	then echo -e "${YLW}${MLKERNEL}-${VERSION}.tar.xz found${FIN}.";
	else aria2c -c --download-result=hide --console-log-level=error --disable-ipv6=true --summary-interval=0 --show-files=false https://cdn.kernel.org/pub/linux/kernel/v5.x/${MLKERNEL}-${VERSION}.tar.xz && echo_ok;
    fi
    echo
    echo_extract
    tar xf ${MLKERNEL}-${VERSION}.tar.xz --checkpoint=.100
    echo_done
    sleep 1s
    cd ${MLKERNEL}-${VERSION}
    export ARCH=arm64
    rm -f scripts/package/builddeb
    rm -f scripts/package/mkdebian
    cp -R ../${PAT}/builddeb scripts/package/
    cp -R ../${PAT}/mkdebian scripts/package/
    chmod +x scripts/package/builddeb
    chmod +x scripts/package/mkdebian
}

userpatches (){
if
ls ../${UP}/*.patch > /dev/null 2>&1;
then echo -e "${GRN}Applying user patches${FIN}." &&
for i in ../${UP}/*.patch; do patch -p1 < $i; done ;
else echo -e "${YLW}No user patches found${FIN}." 
fi
}

patching () {
    echo
    echo_patch
    for i in ../${ML}/*.patch; do patch -p1 < $i; done
    userpatches
    cp -f ../${PAT}/headers-byteshift.patch headers-byteshift.patch
    sed -i 's/export INITRD=$(if_enabled_echo CONFIG_BLK_DEV_INITRD Yes No)/export INITRD=No/g' scripts/package/builddeb
    echo_done
    echo
}

cconfig () {
    echo_cconfig.
    cp -f ../${DEF}/${MYCONFIG} arch/arm64/configs/
    make ARCH=arm64 ${MYCONFIG}
    echo_done
}

rpi_config () {
    echo_fconfig
    cp -f ../${DEF}/bcm2711_defconfig arch/arm64/configs/
    make ARCH=arm64 bcm2711_defconfig &> /dev/null
    echo_done
}

menu_config () {
    echo
    echo_menuconfig
    sleep 1s
    make menuconfig
}

cross_compile () {
    echo -e "-- ${GRN}CC${FIN}"
    echo_build
    echo 'y' | make -j${CORES} ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- bindeb-pkg
    rm -f ../*libc*.deb
}

native_compile () {
    echo -e "-- ${GRN}NC${FIN}"
    echo_build
    echo 'y' | make -j${CORES} ARCH=arm64 bindeb-pkg
    rm -f ../*libc*.deb
}

mainline_clean (){
if ls ${MLKERNEL}-${VERSION} > /dev/null 2>&1;
	then echo "" && echo -e "${YLW}Cleaning${FIN} ..." && rm -fdr ${MLKERNEL}-${VERSION};
fi
if ls *.deb > /dev/null 2>&1;
	then mkdir -p debs && mv -f *.deb debs/;
fi
}
