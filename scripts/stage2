#!/usr/bin/env bash
if [ -e /root/debian.txt ]; then
	source /root/debian.txt;
fi
if [ -e /root/devuan.txt ]; then
	source /root/devuan.txt;
fi
if [ -e /root/ubuntu.txt ]; then
	source /root/ubuntu.txt;
fi
if [ -e /root/services.txt ]; then
	source /root/services.txt;
fi
source /root/universal.txt
source /root/source.txt
source /root/userdata.txt
UNMINIMIZE=/usr/local/sbin/unminimize
URL="https://raw.githubusercontent.com/pyavitz/scripts/master/"

set -o errexit
set -o pipefail
set -o nounset

echo "nameserver ${NAMESERVER1}" > /etc/resolv.conf
echo "nameserver ${NAMESERVER2}" >> /etc/resolv.conf

mount -t proc proc proc/
mount -t sysfs sys sys/

export DEBIAN_FRONTEND="noninteractive"

apt-get update
apt-get install -y apt-utils

### Locales
set_locales

### Timezone
set_timezone

apt upgrade -y
apt dist-upgrade -y
if [[ `grep -w 'DISTRO="ubuntu"' "/root/userdata.txt"` ]]; then
	if [ -f "$UNMINIMIZE" ]; then
		echo 'y' | unminimize;
	fi
	apt_preferences;
	echo "";
fi
if [[ `grep -w "ext4=1" "/root/userdata.txt"` ]]; then
	apt install -y e2fsprogs;
fi
if [[ `grep -w "btrfs=1" "/root/userdata.txt"` ]]; then
	apt install -y btrfs-progs;
fi
if [[ `grep -w "xfs=1" "/root/userdata.txt"` ]]; then
	apt install -y xfsprogs;
fi
if [[ `grep -w 'DISTRO="debian"' "/root/userdata.txt"` ]]; then
	apt install -y ${PKG1} ${PKG2} ${FIRMWARE} resolvconf openssh-client openssh-server;
fi
if [[ `grep -w 'DISTRO="devuan"' "/root/userdata.txt"` ]]; then
	apt install -y openssh-client openssh-server --no-install-recommends;
	apt install -y ${PKG1} ${PKG2} ${FIRMWARE} openresolv ntp ifupdown-extra;
fi
if [[ `grep -w 'DISTRO="ubuntu"' "/root/userdata.txt"` ]]; then
	apt install -y ${PKG1} ${PKG2} openresolv network-manager openssh-client openssh-server;
fi
apt -y clean
apt -y autoclean

### Scripts
echo ""
echo "Moving scripts ..."
sleep 1s
cd ~
mkdir -p /usr/local/bin
mkdir -p /usr/local/sbin
if  [[ `grep -w "bcm2711" "/root/soc.txt"` ]]; then
	wget -cq --show-progress ${URL}write2usb
	wget -cq --show-progress ${URL}deb-eeprom
	mv -f {write2usb,deb-eeprom} /usr/local/bin/;
fi
wget -cq --show-progress ${URL}swh
wget -cq --show-progress ${URL}fetch
wget -cq --show-progress ${URL}governor
mv -f {swh,fetch,governor,run-setup,sysinfo,smon} /usr/local/bin/
if [[ `grep -w "userscripts=1" "/root/userdata.txt"` ]]; then
	uscripts_stage2;
fi
initrd_script
mv -f credentials.sh /usr/local/bin/credentials;
mv -f firstboot.sh /usr/local/sbin/firstboot
if [[ `grep -w 'DISTRO="devuan"' "/root/userdata.txt"` ]]; then
	# Inits
	mv -f firstboot.init /etc/init.d/firstboot
	mv -f leds.init /etc/init.d/leds
	mv -f governor.init /etc/init.d/governor
	mv -f bthelper /etc/init.d/
	mv -f zramswap /etc/init.d/
	mv -f network /etc/init.d/
	mv -f credentials /etc/init.d/
fi
mv -f growpart /usr/bin/
chmod +x /usr/bin/growpart
chown root:root /usr/bin/growpart
chmod +x /usr/local/bin/*
chmod +x /usr/local/sbin/*
chown -R root:root /usr/local/bin/
chown -R root:root /usr/local/sbin/
echo "Done."

### MOTD
echo ""
echo "Adding motd ..."
sleep 1s
mkdir -p /etc/update-motd.d
tee /etc/update-motd.d/15-brand <<EOF
#!/bin/bash
echo
toilet -f small --filter metal '${BRAND}'
echo 
EOF
mv -f 20-sysinfo /etc/update-motd.d/20-sysinfo
if [ -e /etc/update-motd.d/10-help-text ]; then
	rm -f /etc/update-motd.d/10-help-text;
fi
chmod +x /etc/update-motd.d/*
chown root:root /etc/update-motd.d/15-brand
chown root:root /etc/update-motd.d/20-sysinfo
echo "Done."

### Extra firmware
extra_firmware

### Udev rule
if [ -e /root/99-com.rules ]; then
	cd ~
	mkdir -p /lib/udev/rules.d/
	mv -f 99-com.rules /lib/udev/rules.d/
fi

### Network Setup
if [[ `grep -w 'DISTRO="debian"' "/root/userdata.txt"` ]]; then
	network_setup > /dev/null 2>&1;
fi
if [[ `grep -w 'DISTRO="devuan"' "/root/userdata.txt"` ]]; then
	network_setup > /dev/null 2>&1;
fi
if [[ `grep -w 'DISTRO="ubuntu"' "/root/userdata.txt"` ]]; then
	network_manager;
fi

### ZSWAP
zramswap_config

### MOTD instructions
rm -f /etc/motd
mv -f motd /etc/motd
mv -f new.motd /etc/new.motd
chown root:root /etc/motd
chown root:root /etc/new.motd

### Wireless regdb
wireless_regdb

### Adding sys-mods
raspberrypi_sys_mods

### Pi Bluetooth
echo ""
echo "Installing pi-bluetooth ..."
sleep 1s
if [[ `grep -w 'DISTRO="ubuntu"' "/root/userdata.txt"` ]]; then
	git clone https://github.com/pyavitz/pi-bluetooth.git -b ubuntu;
else
	git clone https://github.com/pyavitz/pi-bluetooth.git;
fi
cd pi-bluetooth
chmod +x debian/rules
dpkg-buildpackage -us -uc
cd ~
dpkg -i pi-bluetooth_*.deb
rm -fdR pi-bluetooth*
echo "Done."

###  Raspi userland
rpi_userland

### Adding eeprom
if [[ `grep -w "bcm2711" "/root/soc.txt"` ]]; then
	bcm2711_eeprom;
fi

### Kernel
stage2_kernel

### Modules
if [[ `grep -w "bcm2711" "/root/soc.txt"` ]]; then
	bcm_modules > /dev/null 2>&1;
fi
if [[ `grep -w "bcm2710" "/root/soc.txt"` ]]; then
	bcm2710_modules > /dev/null 2>&1;
fi
if [[ `grep -w "bcm2709" "/root/soc.txt"` ]]; then
	bcm2710_modules > /dev/null 2>&1;
fi
if [[ `grep -w "bcm2708" "/root/soc.txt"` ]]; then
	bcm_modules > /dev/null 2>&1;
fi

### Admin or user
if [[ `grep -w "admin=1" "/root/userdata.txt"` ]]; then
	admin_config;
else
	echo ""
	user_config;
fi
if [[ `grep -w "rootpasswd=1" "/root/userdata.txt"` ]]; then
	root_password;
fi

### Clean misc files
rm -f {*.patch,*led*,*eeprom*}

### RPi Hack
if [[ `grep -w "bcm2708" "/root/soc.txt"` ]]; then
	ln -s /lib/ld-linux.so.3 /lib/ld-linux-armhf.so.3
fi

### Flush runtime journal
if [[ `grep -w "bcm2708" "/root/soc.txt"` ]]; then
	:;
else
	systemd_journald;
fi

### Vchiq permissions
echo 'SUBSYSTEM=="vchiq",GROUP="video",MODE="0660"' > /etc/udev/rules.d/10-vchiq-permissions.rules
echo 'SUBSYSTEM=="vcio",GROUP="video",MODE="0660"' >> /etc/udev/rules.d/10-vchiq-permissions.rules
echo 'SUBSYSTEM=="vc-mem",GROUP="video",MODE="0660"' >> /etc/udev/rules.d/10-vchiq-permissions.rules

if [[ `grep -w 'DISTRO="devuan"' "/root/userdata.txt"` ]]; then
	if [[ `grep -w "btrfs=1" "/root/userdata.txt"` ]]; then
		btrfs_udev-rule;
	fi
fi

echo ""
echo "Checking Services ..."
sleep 1s
if [[ `grep -w 'DISTRO="devuan"' "/root/userdata.txt"` ]]; then
	echo "== Sysvinit";
	led_script > /dev/null 2>&1;
	enable_services > /dev/null 2>&1;
else
	echo "== Systemd";
	firstboot_service > /dev/null 2>&1;
	credentials_service > /dev/null 2>&1;
	governor_service > /dev/null 2>&1;
	led_script > /dev/null 2>&1;
	led_service > /dev/null 2>&1;
	rc-local_service > /dev/null 2>&1;
	enable_services > /dev/null 2>&1;
fi
echo "Done."

# Finish
echo ""
echo "Finalizing ..."
echo ""
sleep 1s

umount /proc /sys
