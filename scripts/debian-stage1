#!/bin/bash
source lib/function/universal
source lib/function/debian
source lib/function/boot
source lib/function/echoes
source lib/source
source userdata.txt > /dev/null 2>&1
UD=userdata.txt

userdata(){
echo ""
echo "Please create a userdata.txt file"
while [ true ] ; do
read -t 20 -n 1
if [ $? = 0 ] ; then
exit ;
else
echo "run make config"
fi
done
}

if [ -f "$UD" ]; then
    echo ""
    :;
else 
    userdata
fi

if [[ `grep -w "verbose=1" "userdata.txt"` ]]; then
	set -eux -o pipefail;
else
	set -eu -o pipefail;
fi
if [ -e /usr/bin/toilet ]; then
	toilet -f small --filter metal 'Debian';
else
	echo -e "${RED}Raspberry Pi Image Builder${FIN}";
fi
RAM=0
PROXY=""
IMAGE_FOLDER="img/"
if [[ `grep -w "bcm2711" "soc.txt"` ]]; then
	DEVICE_SOC="rpi-4";
else
	if [[ `grep -w "bcm2710" "soc.txt"` ]]; then
		DEVICE_SOC="rpi-3";
	else
		if [[ `grep -w "bcm2709" "soc.txt"` ]]; then
			DEVICE_SOC="rpi-2~3";
		else
			if [[ `grep -w "bcm2708" "soc.txt"` ]]; then
				DEVICE_SOC="rpi";
			fi
		fi
	fi
fi
IMAGE_DATE="$(date +%F)"
IMAGE_FILE_NAME="${DEVICE_SOC}-${DISTRO}-${DISTRO_VERSION}-${IMAGE_DATE}.img"
if [ $RAM -ne 0 ]; then
	IMAGE_FOLDER="ram/"
fi
mkdir -p "$IMAGE_FOLDER"
if [ $RAM -ne 0 ]; then
	mount -t tmpfs -o size=3G tmpfs $IMAGE_FOLDER
fi

if [[ `grep -w "verbose=1" "userdata.txt"` ]]; then
	image_size;
else
	image_size > /dev/null 2>&1;
fi
if [[ `grep -w "verbose=1" "userdata.txt"` ]]; then
	partition_uuid;
else
	partition_uuid > /dev/null 2>&1;
fi

### cmd line
cmdline > /dev/null 2>&1
if [ -e p1/cmdline.txt ]; then
	echo
	echo -n "cmdline.txt "
	sleep 1s
	echo_nok;
else
	echo
	echo -n "cmdline.txt "
	sleep 1s
	echo_fail
	exit;
fi
### config dot txt
if [[ `grep -w "bcm2711" "soc.txt"` ]]; then
	bcm2711_config > /dev/null 2>&1;
else
	if [[ `grep -w "bcm2710" "soc.txt"` ]]; then
		bcm2710_config > /dev/null 2>&1;
	else
		if [[ `grep -w "bcm2709" "soc.txt"` ]]; then
			bcm2709_config > /dev/null 2>&1;
		else
			if [[ `grep -w "bcm2708" "soc.txt"` ]]; then
				bcm2708_config > /dev/null 2>&1;
			fi
		fi
	fi
fi
if [ -e p1/config.txt ]; then
	echo
	echo -n "config.txt  "
	sleep 1s
	echo_nok;
else
	echo
	echo -n "config.txt  "
	sleep 1s
	echo_fail
	exit;
fi
bcm2708_initrd
### extract rootfs
if [[ `grep -w "arm64" "soc.txt"` ]]; then
	aarch64_rootfs;
else
	if [[ `grep -w "bcm2709" "soc.txt"` ]]; then
		armhf_rootfs;
	else
		if [[ `grep -w "bcm2708" "soc.txt"` ]]; then
			armel_rootfs;
		fi
	fi
fi

mkdir -p p2/etc/apt/apt.conf.d p2/etc/dpkg/dpkg.cfg.d
echo "force-unsafe-io" > "p2/etc/dpkg/dpkg.cfg.d/dpkg-unsafe-io"

# qemu static
if [[ `grep -w "arm64" "soc.txt"` ]]; then
	qemu_arm64;
else
	if [[ `grep -w "arm" "soc.txt"` ]]; then
		qemu_arm;
	fi
fi

if [[ `grep -w "verbose=1" "userdata.txt"` ]]; then
	distro_release;
else
	distro_release > /dev/null 2>&1;
fi
if [[ `grep -w "verbose=1" "userdata.txt"` ]]; then
	create_fstab;
else
	create_fstab > /dev/null 2>&1;
fi

if [ -n "$PROXY" ] ; then
	tee "p2/etc/apt/apt.conf.d/30proxy" <<EOF
Acquire::http::proxy "http://127.0.0.1:3142";
EOF
fi

# setup stage2
cp scripts/debian-stage2 p2/root
cp lib/function/debian p2/root/debian.txt
cp lib/function/universal p2/root/universal.txt
cp lib/source p2/root/source.txt
cp userdata.txt p2/root
cp soc.txt p2/root
if [[ `grep -w "bcm2711" "soc.txt"` ]]; then
	cp output/bcm2711/*.deb p2/root;
else
	if [[ `grep -w "bcm2710" "soc.txt"` ]]; then
		cp output/bcm2710/*.deb p2/root;
	else
		if [[ `grep -w "bcm2709" "soc.txt"` ]]; then
			cp output/bcm2709/*.deb p2/root;
		else
			if [[ `grep -w "bcm2708" "soc.txt"` ]]; then
				cp output/bcm2708/*.deb p2/root;
			fi
		fi
	fi
fi
cp files/debian/misc/* p2/root
cp files/debian/patches/* p2/root
cp files/debian/rules/* p2/root
cp files/debian/scripts/* p2/root
cp files/misc/* p2/root
cp files/scripts/* p2/root
cp files/users/* p2/root
cp firmware/{fw-0a5c_21e8.hcd,UPDATE.mem} p2/root
if [[ `grep -w "userscripts=1" "userdata.txt"` ]]; then
	uscripts_stage1;
fi
echo -e "${RED}Starting chroot${FIN} ..."
# Mount and chroot
mount -o bind p1 p2/boot
mount -o bind /dev p2/dev
mount -o bind /dev/pts p2/dev/pts
chroot p2 /root/debian-stage2
# unmount
umount p2/dev/pts
umount p2/dev
umount p2/boot

# qemu remove static
if [[ `grep -w "arm64" "soc.txt"` ]]; then
	qemu_arm64_remove;
else
	if [[ `grep -w "arm" "soc.txt"` ]]; then
		qemu_arm_remove;
	fi
fi
cp -f p2/root/kernel.txt .
rm p2/root/debian-stage2
rm -f p2/root/*.txt
rm -f p2/var/cache/debconf/*

if [ -n "$PROXY" ]; then
	rm p2/etc/apt/apt.conf.d/30proxy
fi
rm p2/etc/dpkg/dpkg.cfg.d/dpkg-unsafe-io

### Finish
defrag_p2

umount p2
umount p1

losetup -d "${IMAGE_LOOP_DEV}"
mv "${IMAGE_FOLDER}${IMAGE_FILE_NAME}" "${IMAGE_FILE_NAME}"
if [ $RAM -ne 0 ]; then
	umount "${IMAGE_FOLDER}"
fi
rmdir "${IMAGE_FOLDER}"
rmdir p1 p2

if [[ `grep -w "ext4=1" "userdata.txt"` ]]; then
	ext4_shrink;
else
	:;
fi

if [[ `grep -w "admin=1" "userdata.txt"` ]]; then
	echo
	echo_compress
	compress_image
	echo_done;
else
	rename_image;
fi
rm -f {part-uuid.txt,soc.txt,kernel.txt}
