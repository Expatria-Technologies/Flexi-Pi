#!/bin/bash
source userdata.txt
source lib/source
source lib/function/linux
source lib/function/echoes
source lib/function/compiler
UD=userdata.txt

userdata(){
echo ""
echo -e "You have ${RED}not${FIN} created a ${RED}userdata.txt${FIN} file."
while [ true ]; do
read -t 3 -n 1
if [ $? = 0 ]; then
	exit;
else
	dialog --infobox "Please review the README.md or run make mlconfig." 3 53;
fi
done
}

if [ -f "$UD" ]; then
	:;
else
	userdata;
fi
if [[ `grep -w "rpiuser=1" "userdata.txt"` ]]; then
	echo ""
	echo -e "${RED}Wrong userdata file${FIN}!"
	echo ""
	while [ true ]; do
	read -t 2 -n 1
	if [ $? = 0 ]; then
		exit;
	else
		dialog --infobox "Please review the README.md or run make mlconfig." 3 53;
	fi
	done
fi
# prep
validation
if [[ `grep -w "verbose=1" "userdata.txt"` ]]; then
	set -eux -o pipefail;
else
	set -eu -o pipefail;
fi
compiler
source_dir
mainline_clean

### Download kernel
find_mainline(){
if [[ `wget -S --spider ${MLURL}${MLKERNEL}-${VERSION}.tar.gz 2>&1 | grep 'HTTP/1.1 200 OK'` ]]; then
	download_mainline;
else	
	echo ""
	echo -e "${WHT}It appears the kernel you selected is not available${FIN}?"
	exit > /dev/null 2>&1;
fi
}

find_stable(){
if [[ `wget -S --spider ${STBURL}${MLKERNEL}-${VERSION}.tar.xz 2>&1 | grep 'HTTP/1.1 200 OK'` ]]; then
	download_stable;
else
	echo ""
	echo -e "${WHT}It appears the kernel you selected is not available${FIN}?"
	exit > /dev/null 2>&1;
fi
}

if [[ `grep -w "rc=1" "../userdata.txt"` ]]; then
	find_mainline;
else
	find_stable;
fi

### Patching
patching

### Defconfig
if [[ `grep -w "custom_defconfig=1" "../../userdata.txt"` ]]; then
	cconfig;
else
	rpi_config;
fi

### Menuconfig
if [[ `grep -w "menuconfig=1" "../../userdata.txt"` ]]; then
	menu_config;
fi

### Build deb
if [[ `grep -w "crosscompile=1" "../../userdata.txt"` ]]; then
	cross_compile;
else
	native_compile;
fi
echo
cd ..
rm -f linux-libc-dev*.deb
rm -f *.buildinfo
rm -f *.changes
if [[ `grep -w "bcm2711" "../soc.txt"` ]]; then
	bcm2711_check
	mkdir -p ${OUT4}
	mv -f *.deb ${OUT4}/;
fi
echo_done
